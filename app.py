# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w6vkfh79CZJ_k9dd1niGioA2iDeeeGWx
"""

# app.py
import streamlit as st
import pandas as pd
import json
import joblib
import matplotlib.pyplot as plt

# ====== 1Ô∏è‚É£ PAGE CONFIG ======
st.set_page_config(page_title="Predictive Maintenance Dashboard", layout="wide")

st.title("üß† Predictive Maintenance Dashboard")
st.markdown("**By Juan Diaz | Dual Model: Classification (Failure) + Regression (MTBF)**")

# ====== 2Ô∏è‚É£ LOAD MODELS & METADATA ======
@st.cache_resource
def load_artifacts():
    models = {
        "classifier": joblib.load("artifacts/model_failure_classifier.pkl"),
        "regressor": joblib.load("artifacts/model_mtbf_randomforest.pkl")
    }
    with open("artifacts/features_classifier.json") as f:
        features_cls = json.load(f)
    with open("artifacts/features_mtbf.json") as f:
        features_reg = json.load(f)

    importances_cls = pd.read_csv("artifacts/feature_importances_classifier.csv", index_col=0)
    importances_reg = pd.read_csv("artifacts/feature_importances_mtbf.csv", index_col=0)
    return models, features_cls, features_reg, importances_cls, importances_reg

models, features_cls, features_reg, imp_cls, imp_reg = load_artifacts()

# ====== 3Ô∏è‚É£ SIDEBAR MODE SELECTION ======
st.sidebar.header("‚öôÔ∏è Select Model Type")
mode = st.sidebar.radio("Choose Model:", ["Classification ‚Äì Machine Failure", "Regression ‚Äì MTBF (Time to Failure)"])

# ====== 4Ô∏è‚É£ USER INPUT FORM ======
st.sidebar.header("üîß Input Machine Parameters")

def user_input_features(features):
    input_data = {}
    for col in features:
        input_data[col] = st.sidebar.number_input(f"{col}", step=0.01)
    return pd.DataFrame([input_data])

if mode.startswith("Classification"):
    st.subheader("Model: Machine Failure Prediction")
    st.write("Predict whether a failure will occur within 30 days under given conditions.")
    X_input = user_input_features(features_cls)

    if st.button("üîç Predict Failure"):
        model = models["classifier"]
        pred_proba = model.predict_proba(X_input)[0][1]
        pred_class = model.predict(X_input)[0]
        st.metric("Failure Probability (%)", f"{pred_proba*100:.2f}")
        st.write("Predicted Class:", "‚ö†Ô∏è Failure" if pred_class==1 else "‚úÖ No Failure")

        st.write("---")
        st.write("### üîé Feature Importances")
        st.bar_chart(imp_cls)

else:
    st.subheader("Model: MTBF Regression ‚Äì Time Until Failure")
    st.write("Predict estimated time (minutes) before machine failure.")
    X_input = user_input_features(features_reg)

    if st.button("‚è±Ô∏è Predict MTBF"):
        model = models["regressor"]
        prediction = model.predict(X_input)[0]
        st.metric("Estimated Time to Failure (minutes)", f"{prediction:.2f}")

        st.write("---")
        st.write("### üîé Feature Importances")
        st.bar_chart(imp_reg)

# ====== 5Ô∏è‚É£ FOOTER ======
st.markdown("---")
st.caption("Built with ‚ù§Ô∏è using Streamlit, Scikit-learn, and PyCaret concepts")
